@model MusicDetailViewModel
@inject SignInManager<MediaCollection.Domain.MediaCollectionUser> signInManager

<strong>Title</strong>
<p><em>@Model.SongTitle</em></p>

<strong>Album</strong>
<p><em>@Model.AlbumTitle</em></p>

<strong>Band</strong>
<p><em>@Model.BandName</em></p>

<strong>Duration</strong>
<p><em>@Model.Duration.ToString()</em></p>

<strong>Release Date</strong>
<p><em>@(Model.ReleaseDate?.ToShortDateString() ?? "No release date available.")</em></p>

<strong>Video</strong>
<div id="player"></div>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: '@Model.Link.Replace("https://www.youtube.com/embed/", "")',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>


@if (signInManager.IsSignedIn(User))
{
    <partial name="../Shared/ReviewForm" model="@(new ReviewFormViewModel { Id = Model.Id, ReviewType = nameof(MediaCollection.Domain.Song) })" />
}

<strong>Reviews</strong>
@if (Model.Reviews == null || !Model.Reviews.Any())
{
    <p><em>No reviews available.</em></p>
}
else
{
    @foreach (var review in Model.Reviews)
    {
        <div>
            <strong>@review.User</strong><br />
            <em>@review.Score</em>
            <p>@review.Description</p>
        </div>
    }
}

@if (Model.AlreadyReviewed)
{
    <script>

        alert("You already reviewed this item");

    </script>
}
