@model PlaylistDetailViewModel
@inject SignInManager<MediaCollection.Domain.MediaCollectionUser> signInManager

<button id="play-button"
        class="btn btn-primary">Play All</button>
<h2>@Model.Name</h2>

@if (Model.Songs == null || !Model.Songs.Any())
{
    <p><em>No music available.</em></p>
}
else
{
    <table cellpadding="5">
        <thead>
            <tr>
                <th>Title</th>
                <th>Album</th>
                <th>Band</th>
                <th>Release Date</th>
                <th colspan="3">Duration</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Songs)
            {
            <tr>
                <td>
                    <a asp-controller="Song"
                       asp-action="Detail"
                       asp-route-id="@item.Id">@item.SongTitle</a>
                </td>
                <td>@item.AlbumTitle</td>
                <td>@item.BandName</td>
                <td>@(item.ReleaseDate?.ToShortDateString() ?? "No release date added")</td>
                <td>@item.Duration</td>
                <td><button class="play-button-individual btn btn-secondary" id="@item.Url">Play</button></td>
                <td><a asp-controller="Playlist"
                       asp-action="RemoveSong"
                       asp-route-songId="@item.Id"
                       asp-route-playlistId="@Model.Id"
                       class="play-button-individual" id="@item.Url">Remove</a></td>
            </tr>
            }
        </tbody>
    </table>
}

<div id="player"></div>

<partial name="_AddCommentForm.cshtml" model="@(new MediaCollection.Models.PlaylistViewModels.AddPlaylistCommentViewModel { PlaylistId = Model.Id })" />

<div class="comments">
    <h2>Comments</h2>
    @if (Model.PlaylistComments == null || !Model.PlaylistComments.Any())
    {
        <p><em>No comments available.</em></p>
    }
    else
    {
        @foreach (var comment in Model.PlaylistComments)
        {
            <div class="comment">
                <strong>@comment.User</strong>
                <p><em>@comment.Content</em></p>
            </div>
        }
    }
</div>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    let playAll = false;
    let allIds = [];
    let index = 0;

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }


    let indPlayButtons = document.getElementsByClassName('play-button-individual')

    for (var button of indPlayButtons) {
        const id = button.id;
        button.addEventListener('click', () => {
            playAll = false;
            player.loadVideoById(id, 0)
        });
    }
    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        //event.target.playVideo();
    }

    let playButton = document.getElementById('play-button');
    playButton.addEventListener('click', () => {
        playAll = true;
        for (var button of indPlayButtons) {
            allIds.push(button.id);
        }
        player.loadVideoById(allIds[index], 0);
        index += 1;
        player.playVideo();
    })


    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    function onPlayerStateChange(event) {
        debugger;
        if (playAll === true && event.data === YT.PlayerState.ENDED) {
            if (index < allIds.length) {
                const nextSong = allIds[index];
                player.loadVideoById(nextSong, 0);
                index += 1;
                player.playVideo();
            }
        }

    }
    function stopVideo() {
        player.stopVideo();
    }
</script>